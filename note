#Backtracking is a form of recursion that is particularly useful for types of problems such as traversing tree structures, where we are presented with a number of options for each node, from which we must choose one. Subsequently, we are presented with a different set of options
-------

education is abundunt, all over the internet.
its desire to learn thats scarce. -NAVAL RAVIKANT 

OBEJCTIVE: making best use of online available resources and tools to make people educate better than college degree itself

NOT a UNIVERSITY

Actions:
    - gatering information from multiple sources and contents 
    - Making useof youtube and removing distractions from it , I.e, removing complete recommendatios 
    - making it incentive based
    - people should be able to stick to course and complete and apply it to their respective fields
    - what would keep people motivated to learn and complete the course structures ?-> tb thought through
    - its all about making small efforts daily for some period of time
    - make a crome extension and website as well and mobile app too !

my OBEJCTIVE is to make people learn and educate themselves

making it collaborative, people from different diciplines come together and make things effective 

#
-------------------------
# sliding window identification
1 - array and string question2
2 - window size given or 
3 - subset size to be found





------------------
Non-Repeating Element
Medium
50 / 50
Given a sorted list of numbers in which all elements appear twice except one element that appears only once, find the number that appears only once.

Example:
1, 1, 2, 3, 3, 4, 4
Here, ‘2’ appears once and all other elements appear twice.

findNonRepeatingElement([1, 1, 2, 3, 3, 4, 4]) => 2

Optimal Approach
Since the array is sorted and all elements are occurring twice except one.

So the first occurrence of a particular element will be on even positions (i.e. 0, 2, 4…) and the second occurrence will be on odd positions ( i.e. 1, 3, 5…).

But after encountering the element with a single occurrence this property will change and the first occurrence will be on odd positions and the second occurrence will be on even positions.

This observation can be used to find the answer efficiently using binary search.

Declare three variable low=0, high = n-1 and mid;
While (low<=high) assign mid=(high+low)/2.
If mid is even then check if arr[mid] and arr[mid+1] are equal. If yes, then the element must be in the second half otherwise the element must be in the first half.
If mid is odd then check if arr[mid] and arr[mid-1] are equal. If yes, then the element must be in the second half otherwise the element must be in the first half.
When low and high are equal, return the value of arr[low] as it is the only element that is not equal to its previous or next element.